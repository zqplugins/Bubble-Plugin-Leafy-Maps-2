function(instance, properties, context){
	function _0x36e0() {
    const _0xe1a35a = [
        '536680trqxGl',
        'line_cap',
        '1634562SjwEyy',
        'mymap',
        'push',
        'use_encoded_shape_polyline',
        'stroke_opacity',
        'getBounds',
        'geometry_clicked_name',
        'polyline_name',
        'list_of_longitudes',
        '238424znYYGJ',
        'data',
        'charCodeAt',
        'forEach',
        'click',
        '111phkmFQ',
        '9720TvHPXb',
        'stroke_color',
        '864346YPVblu',
        '244666LgFEtI',
        '26895HLOzcs',
        'get',
        'line_join',
        'list_of_latitudes',
        '9jfYBkk',
        'pow',
        'encoded_shape',
        'length'
    ];
    _0x36e0 = function () {
        return _0xe1a35a;
    };
    return _0x36e0();
}
(function (_0x54e8ee, _0x66ff39) {
    const _0x120dc4 = _0x50e7, _0x135f02 = _0x54e8ee();
    while (!![]) {
        try {
            const _0x3b946f = -parseInt(_0x120dc4(0x203)) / 0x1 + -parseInt(_0x120dc4(0x200)) / 0x2 * (-parseInt(_0x120dc4(0x1ff)) / 0x3) + -parseInt(_0x120dc4(0x1ef)) / 0x4 + -parseInt(_0x120dc4(0x204)) / 0x5 + parseInt(_0x120dc4(0x1f1)) / 0x6 + parseInt(_0x120dc4(0x202)) / 0x7 + parseInt(_0x120dc4(0x1fa)) / 0x8 * (parseInt(_0x120dc4(0x1eb)) / 0x9);
            if (_0x3b946f === _0x66ff39)
                break;
            else
                _0x135f02['push'](_0x135f02['shift']());
        } catch (_0x1964f7) {
            _0x135f02['push'](_0x135f02['shift']());
        }
    }
}(_0x36e0, 0x36081));
function _0x50e7(_0x4dc6e6, _0x24b710) {
    const _0x36e0f4 = _0x36e0();
    return _0x50e7 = function (_0x50e7de, _0x55d872) {
        _0x50e7de = _0x50e7de - 0x1ea;
        let _0x5a635f = _0x36e0f4[_0x50e7de];
        return _0x5a635f;
    }, _0x50e7(_0x4dc6e6, _0x24b710);
}
function run(_0x51e582, _0x56aa2a, _0x5a3872) {
    const _0xbecb6b = _0x50e7, _0xaf24d = function (_0x1188f2, _0x3409be) {
            const _0x44a3c4 = _0x50e7;
            var _0xf19f44 = 0x0, _0x133f94 = 0x0, _0x4be690 = 0x0, _0x15d02b = [], _0x54079f = 0x0, _0x3d63d9 = 0x0, _0x313f95 = null, _0x328db9, _0x1dd0f8, _0x1ad63c = Math[_0x44a3c4(0x1ec)](0xa, _0x3409be || 0x6);
            while (_0xf19f44 < _0x1188f2[_0x44a3c4(0x1ee)]) {
                _0x313f95 = null, _0x54079f = 0x0, _0x3d63d9 = 0x0;
                do {
                    _0x313f95 = _0x1188f2[_0x44a3c4(0x1fc)](_0xf19f44++) - 0x3f, _0x3d63d9 |= (_0x313f95 & 0x1f) << _0x54079f, _0x54079f += 0x5;
                } while (_0x313f95 >= 0x20);
                _0x328db9 = _0x3d63d9 & 0x1 ? ~(_0x3d63d9 >> 0x1) : _0x3d63d9 >> 0x1, _0x54079f = _0x3d63d9 = 0x0;
                do {
                    _0x313f95 = _0x1188f2['charCodeAt'](_0xf19f44++) - 0x3f, _0x3d63d9 |= (_0x313f95 & 0x1f) << _0x54079f, _0x54079f += 0x5;
                } while (_0x313f95 >= 0x20);
                _0x1dd0f8 = _0x3d63d9 & 0x1 ? ~(_0x3d63d9 >> 0x1) : _0x3d63d9 >> 0x1, _0x133f94 += _0x328db9, _0x4be690 += _0x1dd0f8, _0x15d02b[_0x44a3c4(0x1f3)]([
                    _0x133f94 / _0x1ad63c,
                    _0x4be690 / _0x1ad63c
                ]);
            }
            return _0x15d02b;
        };
    let _0x5eae51 = [], _0x1d36d4 = (_0x5762eb, _0x2a893a, _0x2f5934) => {
            const _0x140764 = _0x50e7;
            let _0x5addad = _0x5762eb[_0x140764(0x205)](_0x2a893a, _0x2f5934);
            return _0x5addad;
        }, _0x53f656 = (_0x515b92, _0xcf3645) => {
            let _0x258c7b = _0x1d36d4(_0x515b92, 0x0, _0xcf3645);
            return _0x258c7b;
        };
    if (_0x56aa2a[_0xbecb6b(0x1f4)])
        _0x5eae51 = _0xaf24d(_0x56aa2a[_0xbecb6b(0x1ed)], 0x6);
    else {
        if (!_0x56aa2a['use_encoded_shape_polyline']) {
            let _0x133610 = _0x53f656(_0x56aa2a['list_of_latitudes'], _0x56aa2a[_0xbecb6b(0x1ea)][_0xbecb6b(0x1ee)]()), _0x58a0f5 = _0x53f656(_0x56aa2a[_0xbecb6b(0x1f9)], _0x56aa2a[_0xbecb6b(0x1f9)]['length']());
            const _0x1491bb = (_0x15da89, _0x324f5b, _0x66ac3a) => {
                const _0x5e3924 = _0xbecb6b;
                _0x5eae51[_0x5e3924(0x1f3)]([
                    _0x133610[_0x324f5b],
                    _0x58a0f5[_0x324f5b]
                ]);
            };
            _0x133610[_0xbecb6b(0x1fd)](_0x1491bb);
        }
    }
    let _0x420bfd = {
        'color': _0x56aa2a[_0xbecb6b(0x201)],
        'weight': _0x56aa2a['stroke_weight'],
        'opacity': _0x56aa2a[_0xbecb6b(0x1f5)],
        'lineCap': _0x56aa2a[_0xbecb6b(0x1f0)],
        'lineJoin': _0x56aa2a[_0xbecb6b(0x206)]
    };
    _0x51e582['data']['' + _0x56aa2a[_0xbecb6b(0x1f8)]] = L['polyline'](_0x5eae51, _0x420bfd)['addTo'](_0x51e582[_0xbecb6b(0x1fb)][_0xbecb6b(0x1f2)]), _0x51e582['data']['' + _0x56aa2a[_0xbecb6b(0x1f8)]]['on'](_0xbecb6b(0x1fe), function () {
        const _0x2926fd = _0xbecb6b;
        _0x51e582['publishState'](_0x2926fd(0x1f7), _0x56aa2a['polyline_name']);
    }), _0x56aa2a['zoom_map_to_this_line'] && _0x51e582[_0xbecb6b(0x1fb)][_0xbecb6b(0x1f2)]['fitBounds'](_0x51e582[_0xbecb6b(0x1fb)]['' + _0x56aa2a[_0xbecb6b(0x1f8)]][_0xbecb6b(0x1f6)]());
}
	 run(instance, properties, context);
}